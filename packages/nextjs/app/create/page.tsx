"use client";

import { useState } from "react";
import { QRCodeSVG } from "qrcode.react";
import { parseUnits } from "viem";
import { useAccount } from "wagmi";
import { useScaffoldWriteContract } from "~~/hooks/scaffold-eth";
import { notification } from "~~/utils/scaffold-eth";

interface Recipient {
  address: string;
  percentage: number;
  name?: string;
}

export default function CreateInvoice() {
  const { address: userAddress } = useAccount();
  const [aiPrompt, setAiPrompt] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  const [amount, setAmount] = useState("");
  const [description, setDescription] = useState("");
  const [recipients, setRecipients] = useState<Recipient[]>([{ address: "", percentage: 100 }]);

  const [invoiceId, setInvoiceId] = useState<string>("");
  const [showSuccess, setShowSuccess] = useState(false);

  const { writeContractAsync } = useScaffoldWriteContract("MonadPay");

  const USDC_ADDRESS = "0xf817257ed378db8d94729d51756917d3168cb558"; // Monad USDC

  async function generateWithAI() {
    if (!aiPrompt.trim()) return;

    setIsGenerating(true);
    try {
      const res = await fetch("/api/generate-invoice", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: aiPrompt }),
      });

      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || "Failed to generate invoice");
      }

      const data = await res.json();

      setAmount(data.amount.toString());
      setDescription(data.description);
      setRecipients(
        data.recipients.map((r: any) => ({
          address: r.address || "",
          name: r.name || "",
          percentage: r.percentage,
        })),
      );

      notification.success("Invoice generated by AI! ðŸ¤–");
    } catch (error: any) {
      notification.error(error.message || "Failed to generate invoice");
    } finally {
      setIsGenerating(false);
    }
  }

  async function createInvoice() {
    if (!amount || !description || recipients.length === 0) {
      notification.error("Please fill all fields");
      return;
    }

    // Validate percentages
    const total = recipients.reduce((sum, r) => sum + r.percentage, 0);
    if (Math.abs(total - 100) > 0.01) {
      notification.error("Percentages must add up to 100%");
      return;
    }

    // Validate addresses
    for (const r of recipients) {
      if (!r.address || !r.address.startsWith("0x") || r.address.length !== 42) {
        notification.error("All recipients must have valid Ethereum addresses (0x...)");
        return;
      }
    }

    try {
      const amountInUSDC = parseUnits(amount, 6); // USDC has 6 decimals

      const splits = recipients.map(r => ({
        recipient: r.address,
        basisPoints: BigInt(Math.round(r.percentage * 100)), // Convert percentage to basis points
      }));

      await writeContractAsync({
        functionName: "createInvoice",
        args: [amountInUSDC, USDC_ADDRESS, description, splits],
      });

      // In a real app, you'd parse the event from the transaction receipt
      // For now, we'll use a placeholder
      const placeholderInvoiceId = `0x${Date.now().toString(16).padStart(64, "0")}`;

      setInvoiceId(placeholderInvoiceId);
      setShowSuccess(true);

      notification.success("Invoice created successfully! ðŸŽ‰");
    } catch (error: any) {
      console.error("Create invoice error:", error);
      notification.error(error.message || "Failed to create invoice");
    }
  }

  const paymentLink = invoiceId
    ? `${typeof window !== "undefined" ? window.location.origin : ""}/pay/${invoiceId}`
    : "";

  if (showSuccess && invoiceId) {
    return (
      <div className="container mx-auto p-8 max-w-2xl">
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body items-center text-center">
            <h2 className="card-title text-3xl mb-4">âœ… Invoice Created!</h2>

            <div className="mb-6 p-4 bg-white rounded-lg">
              <QRCodeSVG value={paymentLink} size={256} level="H" includeMargin />
            </div>

            <div className="w-full text-left space-y-2 bg-base-200 p-4 rounded-lg">
              <p>
                <strong>Amount:</strong> {amount} USDC
              </p>
              <p>
                <strong>Description:</strong> {description}
              </p>
              <p>
                <strong>Recipients:</strong>
              </p>
              <ul className="ml-4">
                {recipients.map((r, i) => (
                  <li key={i}>
                    {r.name && `${r.name} - `}
                    {r.address.slice(0, 6)}...{r.address.slice(-4)} - {r.percentage}%
                  </li>
                ))}
              </ul>
            </div>

            <div className="w-full mt-4">
              <label className="label">Payment Link:</label>
              <div className="flex gap-2">
                <input type="text" value={paymentLink} readOnly className="input input-bordered flex-1 text-sm" />
                <button
                  onClick={() => {
                    navigator.clipboard.writeText(paymentLink);
                    notification.success("Copied to clipboard! ðŸ“‹");
                  }}
                  className="btn btn-primary"
                >
                  ðŸ“‹ Copy
                </button>
              </div>
            </div>

            <button
              onClick={() => {
                setShowSuccess(false);
                setInvoiceId("");
                setAiPrompt("");
                setAmount("");
                setDescription("");
                setRecipients([{ address: "", percentage: 100 }]);
              }}
              className="btn btn-secondary mt-4"
            >
              Create Another Invoice
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-8 max-w-2xl">
      <h1 className="text-4xl font-bold mb-8 text-center">Create Invoice</h1>

      {/* AI Generation */}
      <div className="card bg-base-100 shadow-xl mb-6">
        <div className="card-body">
          <h2 className="card-title">ðŸ¤– Generate with AI</h2>
          <p className="text-sm opacity-70 mb-4">
            Describe your invoice in natural language. Try:
            <br />
            <span className="italic text-xs">Send $1000 to 0xABC... and 0xDEF..., split 60/40 for website design</span>
          </p>
          <textarea
            className="textarea textarea-bordered h-24"
            placeholder="Example: Pay $500 to Alice at 0x123... and Bob at 0x456..., split 70/30 for freelance work"
            value={aiPrompt}
            onChange={e => setAiPrompt(e.target.value)}
            disabled={isGenerating}
          />
          <button onClick={generateWithAI} disabled={isGenerating || !aiPrompt.trim()} className="btn btn-primary">
            {isGenerating ? (
              <>
                <span className="loading loading-spinner loading-sm"></span>
                Generating...
              </>
            ) : (
              "Generate with AI"
            )}
          </button>
        </div>
      </div>

      {/* Manual Form */}
      <div className="card bg-base-100 shadow-xl">
        <div className="card-body">
          <h2 className="card-title">Invoice Details</h2>

          <div className="form-control">
            <label className="label">
              <span className="label-text">Amount (USDC)</span>
            </label>
            <input
              type="number"
              placeholder="100"
              className="input input-bordered"
              value={amount}
              onChange={e => setAmount(e.target.value)}
              min="0"
              step="0.01"
            />
          </div>

          <div className="form-control">
            <label className="label">
              <span className="label-text">Description</span>
            </label>
            <input
              type="text"
              placeholder="Website design project"
              className="input input-bordered"
              value={description}
              onChange={e => setDescription(e.target.value)}
            />
          </div>

          <div className="form-control">
            <label className="label">
              <span className="label-text">Recipients & Splits</span>
              <span className="label-text-alt">
                Total: {recipients.reduce((sum, r) => sum + (r.percentage || 0), 0)}%
              </span>
            </label>

            {recipients.map((recipient, index) => (
              <div key={index} className="flex gap-2 mb-2 items-center">
                <input
                  type="text"
                  placeholder="0x..."
                  className="input input-bordered flex-1 font-mono text-sm"
                  value={recipient.address}
                  onChange={e => {
                    const newRecipients = [...recipients];
                    newRecipients[index].address = e.target.value;
                    setRecipients(newRecipients);
                  }}
                />
                <input
                  type="number"
                  placeholder="%"
                  className="input input-bordered w-20"
                  value={recipient.percentage}
                  onChange={e => {
                    const newRecipients = [...recipients];
                    newRecipients[index].percentage = parseFloat(e.target.value) || 0;
                    setRecipients(newRecipients);
                  }}
                  min="0"
                  max="100"
                  step="0.01"
                />
                <span className="text-sm">%</span>
                {recipients.length > 1 && (
                  <button
                    onClick={() => {
                      setRecipients(recipients.filter((_, i) => i !== index));
                    }}
                    className="btn btn-error btn-sm"
                  >
                    âœ•
                  </button>
                )}
              </div>
            ))}

            <button
              onClick={() => setRecipients([...recipients, { address: "", percentage: 0 }])}
              className="btn btn-sm btn-secondary mt-2"
            >
              + Add Recipient
            </button>
          </div>

          <div className="divider"></div>

          <button onClick={createInvoice} disabled={!userAddress} className="btn btn-primary btn-lg">
            {userAddress ? "Create Invoice" : "Connect Wallet First"}
          </button>

          {!userAddress && (
            <div className="alert alert-warning mt-4">
              <span>Please connect your wallet to create an invoice</span>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
